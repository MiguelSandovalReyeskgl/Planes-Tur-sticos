/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package appkant;
import java.util.Properties;

import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;
import java.io.File;
import javax.swing.JOptionPane;


import validador.Validador;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.*;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.BaseColor;



import java.io.FileOutputStream;

import java.io.FileOutputStream;
import java.io.IOException;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.List;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import java.security.SecureRandom;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.ButtonGroup;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.border.AbstractBorder;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.UUID;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.table.DefaultTableModel;
import java.util.*;
import javax.swing.SwingUtilities;





/**
 *
 * @author migue
 */
public class Comprau extends javax.swing.JFrame {
    
 private Conexion conexionBD;
    private Connection conn;
    /**
     * Creates new form Comprau    PlanesTuristicos 
     */
    String usuarion;
    public Comprau(String usuarion) {
           this.setUndecorated(true);
        this.usuarion = usuarion;
        initComponents();
        
        conexionBD = new Conexion();
        try {
            conexionBD.conectar();
            conn = conexionBD.obtenerConexion(); 
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
       construirTablaPlanes(panelTabla); 
       
       
       
     buscador.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
    public void insertUpdate(javax.swing.event.DocumentEvent e) { actualizarFiltroPlanes(); }
    public void removeUpdate(javax.swing.event.DocumentEvent e) { actualizarFiltroPlanes(); }
    public void changedUpdate(javax.swing.event.DocumentEvent e) { actualizarFiltroPlanes(); }
});


        

    }
private void actualizarFiltroPlanes() {
    String texto = buscador.getText().trim(); 
    boolean buscarPorDescripcion = jRadioButton1.isSelected(); 
    filtrarPlanes(panelTabla, texto, buscarPorDescripcion);
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        a = new javax.swing.ButtonGroup();
        weatherComponentBeanInfo1 = new com.weatherComponent.WeatherComponentBeanInfo();
        weatherComponentBeanInfo2 = new com.weatherComponent.WeatherComponentBeanInfo();
        asignacioPlanes = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        buscador = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelTabla = new javax.swing.JPanel();
        panelAsignarPlanTuristico = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        weatherComponent1 = new com.weatherComponent.WeatherComponent();
        jButton1 = new javax.swing.JButton();
        turistaEmail = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        panelImagen = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        logOutBtn = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        asignacioPlanes.setBackground(new java.awt.Color(255, 255, 255));
        asignacioPlanes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setBackground(new java.awt.Color(51, 51, 51));
        jLabel10.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        jLabel10.setText("Mira los planes turisticos existentes cada plan turistico tiene duración de 1 día!!!");
        jPanel7.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 620, 20));

        a.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("Nombre");
        jPanel7.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        a.add(jRadioButton1);
        jRadioButton1.setText("Descripción");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        jPanel7.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, -1, -1));

        buscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buscadorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                buscadorKeyTyped(evt);
            }
        });
        jPanel7.add(buscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 150, 30));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        panelTabla.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelTablaLayout = new javax.swing.GroupLayout(panelTabla);
        panelTabla.setLayout(panelTablaLayout);
        panelTablaLayout.setHorizontalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1115, Short.MAX_VALUE)
        );
        panelTablaLayout.setVerticalGroup(
            panelTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelTabla);

        jPanel7.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 710, 410));

        asignacioPlanes.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 730, 570));

        panelAsignarPlanTuristico.setBackground(new java.awt.Color(255, 255, 255));
        panelAsignarPlanTuristico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelAsignarPlanTuristico.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setBackground(new java.awt.Color(51, 51, 51));
        jLabel11.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel11.setText("Asignar Plan Turístico");
        panelAsignarPlanTuristico.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 240, 30));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/calendario (1).png"))); // NOI18N
        panelAsignarPlanTuristico.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 40, 40));

        jLabel13.setBackground(new java.awt.Color(51, 51, 51));
        jLabel13.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        jLabel13.setText("Selecciona el plan Y DALE COMPRAR!!!");
        panelAsignarPlanTuristico.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 310, 20));

        total.setFont(new java.awt.Font("Roboto SemiBold", 1, 18)); // NOI18N
        panelAsignarPlanTuristico.add(total, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 390, 150, 30));

        weatherComponent1.setCity("Oaxaca");

        javax.swing.GroupLayout weatherComponent1Layout = new javax.swing.GroupLayout(weatherComponent1);
        weatherComponent1.setLayout(weatherComponent1Layout);
        weatherComponent1Layout.setHorizontalGroup(
            weatherComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        weatherComponent1Layout.setVerticalGroup(
            weatherComponent1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        panelAsignarPlanTuristico.add(weatherComponent1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 180, 160));

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Comprar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelAsignarPlanTuristico.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 500, 250, 60));

        turistaEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                turistaEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                turistaEmailFocusLost(evt);
            }
        });
        turistaEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turistaEmailActionPerformed(evt);
            }
        });
        panelAsignarPlanTuristico.add(turistaEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 450, 300, 40));

        jLabel1.setText("Email del turista");
        panelAsignarPlanTuristico.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, -1, -1));

        jLabel32.setFont(new java.awt.Font("Roboto Light", 0, 12)); // NOI18N
        jLabel32.setText("ID");
        panelAsignarPlanTuristico.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 140, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Total:");
        panelAsignarPlanTuristico.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, -1, -1));

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        panelAsignarPlanTuristico.add(panelImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 180, 150));

        jLabel2.setText("ID del plan:");
        panelAsignarPlanTuristico.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, -1, -1));

        asignacioPlanes.add(panelAsignarPlanTuristico, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 80, 400, 570));

        logOutBtn.setBackground(new java.awt.Color(255, 255, 255));
        logOutBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        logOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logOutBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logOutBtnMouseExited(evt);
            }
        });
        logOutBtn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Roboto Light", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Log Out");
        logOutBtn.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 8, -1, 40));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir-alt.png"))); // NOI18N
        logOutBtn.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 50));

        asignacioPlanes.add(logOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 10, 140, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(asignacioPlanes, javax.swing.GroupLayout.PREFERRED_SIZE, 1610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(asignacioPlanes, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    
    private void construirTablaPlanes(JPanel panelPlanes) {
    panelPlanes.setOpaque(true);
    panelPlanes.removeAll();
    panelPlanes.setLayout(new BoxLayout(panelPlanes, BoxLayout.Y_AXIS));

    String[] columnas = {"","ID", "Nombre", "Descripción", "Precio"};
    int[] anchos = {50, 50, 150, 250, 100};

    JPanel header = new JPanel(new GridLayout(1, columnas.length));
    for (int i = 0; i < columnas.length; i++) {
        JLabel lbl = new JLabel(columnas[i], JLabel.CENTER);
        lbl.setFont(new Font("Roboto Medium", Font.BOLD, 14));
        lbl.setPreferredSize(new Dimension(anchos[i], 30));
        header.add(lbl);
    }
    panelPlanes.add(header);

    ButtonGroup grupo = new ButtonGroup();

    Conexion conexion = new Conexion();
    Connection conn = null;

    try {
        conexion.conectar();
        conn = conexion.getConexion();

        String query = "SELECT  planesID, nombre, descripcion, precio FROM Planes";  // Asegúrate de tener duracion
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
        String id = rs.getString("planesID");


            double precio = rs.getDouble("precio");

            JPanel filaPanel = new JPanel(new GridLayout(1, columnas.length));
            filaPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));

            
            JRadioButton radio = new JRadioButton();
            radio.setHorizontalAlignment(SwingConstants.CENTER);
            grupo.add(radio);
            filaPanel.add(wrap(radio, anchos[0]));
           
filaPanel.add(wrap(new JLabel(id, JLabel.CENTER), anchos[1]));


          
            filaPanel.add(wrap(new JLabel(nombre, JLabel.CENTER), anchos[1]));
            filaPanel.add(wrap(new JLabel(descripcion, JLabel.CENTER), anchos[2]));
       
            filaPanel.add(wrap(new JLabel(String.format("$%.2f", precio), JLabel.CENTER), anchos[3]));

            radio.addActionListener(e -> {
                for (Component comp : panelPlanes.getComponents()) {
                    if (comp instanceof JPanel && comp != header) {
                        comp.setBackground(null);
                    }
                }
                filaPanel.setBackground(new Color(230, 255, 240));
            });

            panelPlanes.add(filaPanel);
        }

        rs.close();
        stmt.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
            "Error al cargar planes:\n" + e.getMessage(),
            "Error de base de datos",
            JOptionPane.ERROR_MESSAGE);
    } finally {
        conexion.cerrar();
    }

    panelPlanes.revalidate();
    panelPlanes.repaint();
}
    */
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    /*
    private void construirTablaPlanes(JPanel panelPlanes) {
    panelPlanes.setOpaque(true);
    panelPlanes.removeAll();
    panelPlanes.setLayout(new BoxLayout(panelPlanes, BoxLayout.Y_AXIS));

    String[] columnas = {"", "ID", "Nombre", "Descripción", "Precio", "Imagen"};
    int[] anchos = {50, 50, 150, 250, 100, 110}; // Aumentamos ancho para la imagen

    JPanel header = new JPanel(new GridLayout(1, columnas.length));
    for (int i = 0; i < columnas.length; i++) {
        JLabel lbl = new JLabel(columnas[i], JLabel.CENTER);
        lbl.setFont(new Font("Roboto Medium", Font.BOLD, 14));
        lbl.setPreferredSize(new Dimension(anchos[i], 30));
        header.add(lbl);
    }
    panelPlanes.add(header);

    ButtonGroup grupo = new ButtonGroup();

    Conexion conexion = new Conexion();
    Connection conn = null;

    try {
        conexion.conectar();
        conn = conexion.getConexion();

        String query = "SELECT planesID, nombre, descripcion, precio, imagen FROM Planes";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String id = rs.getString("planesID");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            double precio = rs.getDouble("precio");
            String imagenURL = rs.getString("imagen"); // Ejemplo: imagenesturismo/1.jpg

            JPanel filaPanel = new JPanel(new GridLayout(1, columnas.length));
            filaPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));

            JRadioButton radio = new JRadioButton();
            radio.setHorizontalAlignment(SwingConstants.CENTER);
            grupo.add(radio);
            filaPanel.add(wrap(radio, anchos[0]));

            filaPanel.add(wrap(new JLabel(id, JLabel.CENTER), anchos[1]));
            filaPanel.add(wrap(new JLabel(nombre, JLabel.CENTER), anchos[2]));
            filaPanel.add(wrap(new JLabel(descripcion, JLabel.CENTER), anchos[3]));
            filaPanel.add(wrap(new JLabel(String.format("$%.2f", precio), JLabel.CENTER), anchos[4]));

            JLabel lblImagen = new JLabel("Cargando...", JLabel.CENTER);

            new SwingWorker<ImageIcon, Void>() {
                @Override
                protected ImageIcon doInBackground() throws Exception {
                    java.net.URL url = getClass().getResource("/" + imagenURL);
                    if (url == null) {
                        throw new FileNotFoundException("No se encontró: " + imagenURL);
                    }
                    ImageIcon icon = new ImageIcon(url);
                    Image img = icon.getImage().getScaledInstance(70, 50, Image.SCALE_SMOOTH);
                    return new ImageIcon(img);
                }

                @Override
                protected void done() {
                    try {
                        lblImagen.setIcon(get());
                        lblImagen.setText(""); // Quitamos el texto "Cargando..."
                    } catch (Exception e) {
                        lblImagen.setText("Sin imagen");
                    }
                }
            }.execute();

            filaPanel.add(wrap(lblImagen, anchos[5]));

            radio.addActionListener(e -> {
                for (Component comp : panelPlanes.getComponents()) {
                    if (comp instanceof JPanel && comp != header) {
                        comp.setBackground(null);
                    }
                }

                filaPanel.setBackground(new Color(230, 255, 240));
                // Elimina o cambia esta línea si `jLabel32` no existe en esta clase
                 jLabel32.setText(id);
            });

            panelPlanes.add(filaPanel);
        }

        rs.close();
        stmt.close();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
            "Error al cargar planes:\n" + e.getMessage(),
            "Error de base de datos",
            JOptionPane.ERROR_MESSAGE);
    } finally {
        conexion.cerrar();
    }

    panelPlanes.revalidate();
    panelPlanes.repaint();
}
*/
    
    
    
    
    
    
    
    
    

    
    private ImageIcon cargarIconoImagen(String ruta) throws Exception {
    // 1) ¿dentro del JAR/classpath?
    java.net.URL url = getClass().getResource("/" + ruta);
    if (url != null) {
        return new ImageIcon(url);
    }

    java.io.File f = new java.io.File(ruta);

    // 2) absoluta y existe
    if (f.isAbsolute() && f.exists()) {
        return new ImageIcon(f.getAbsolutePath());
    }

    // 3) relativa al directorio donde se ejecuta la app
    if (!f.isAbsolute()) {
        f = new java.io.File(System.getProperty("user.dir"), ruta);
        if (f.exists()) {
            return new ImageIcon(f.getAbsolutePath());
        }
    }

    throw new java.io.FileNotFoundException("No se encontró la imagen: " + ruta);
}
    
    public void mostrarImagenEnPanel(String imagenURL, JPanel panelDestino) {
    SwingUtilities.invokeLater(() -> {
        panelDestino.removeAll();
        try {
            if (imagenURL == null || imagenURL.trim().isEmpty()) {
                throw new Exception("Ruta de imagen vacía");
            }

            ImageIcon icono = cargarIconoImagen(imagenURL);
            Image img = icono.getImage().getScaledInstance(
                panelDestino.getWidth() > 0 ? panelDestino.getWidth() : 200,
                panelDestino.getHeight() > 0 ? panelDestino.getHeight() : 150,
                Image.SCALE_SMOOTH
            );

            panelDestino.setLayout(new BorderLayout());
            panelDestino.add(new JLabel(new ImageIcon(img), JLabel.CENTER));
        } catch (Exception ex) {
            panelDestino.setLayout(new BorderLayout());
            panelDestino.add(new JLabel("Imagen no disponible", JLabel.CENTER));
            System.out.println("Error al cargar imagen: " + ex.getMessage());
        } finally {
            panelDestino.revalidate();
            panelDestino.repaint();
        }
    });
}

private java.util.List<String> idsSeleccionados = new ArrayList<>();
private void construirTablaPlanes(JPanel panelPlanes) {
    panelPlanes.setOpaque(true);
    panelPlanes.removeAll();
    panelPlanes.setLayout(new BoxLayout(panelPlanes, BoxLayout.Y_AXIS));

    String[] columnas = {"", "Nombre", "Descripción", "Precio"};
    int[] anchos = {50, 180, 280, 100};

    JPanel header = new JPanel(new GridLayout(1, columnas.length));
    for (int i = 0; i < columnas.length; i++) {
        JLabel lbl = new JLabel(columnas[i], JLabel.CENTER);
        lbl.setFont(new Font("Roboto Medium", Font.BOLD, 14));
        lbl.setPreferredSize(new Dimension(anchos[i], 30));
        header.add(lbl);
    }
    panelPlanes.add(header);

    idsSeleccionados.clear();
    java.util.Map<String, Double> preciosSeleccionados = new java.util.HashMap<>();

    Conexion conexion = new Conexion();
    Connection conn = null;

    try {
        conexion.conectar();
        conn = conexion.getConexion();

        String query = "SELECT planesID, nombre, descripcion, precio, imagen FROM Planes";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String id = rs.getString("planesID");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            double precio = rs.getDouble("precio");
            String imagenURL = rs.getString("imagen");

            JPanel filaPanel = new JPanel(new GridLayout(1, columnas.length));
            filaPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));

            JCheckBox checkBox = new JCheckBox();
            checkBox.setName(id);
            checkBox.setHorizontalAlignment(SwingConstants.CENTER);
            filaPanel.add(wrap(checkBox, anchos[0]));

            filaPanel.add(wrap(new JLabel(nombre, JLabel.CENTER), anchos[1]));
            filaPanel.add(wrap(new JLabel(descripcion, JLabel.CENTER), anchos[2]));
            filaPanel.add(wrap(new JLabel(String.format("$%.2f", precio), JLabel.CENTER), anchos[3]));

            checkBox.addActionListener(e -> {
                if (checkBox.isSelected()) {
                    if (!idsSeleccionados.contains(id)) {
                        idsSeleccionados.add(id);
                        preciosSeleccionados.put(id, precio);
                    }

                    mostrarImagenEnPanel(imagenURL, panelImagen); // 👈🏼 Aquí se muestra
                }

                double totall = preciosSeleccionados.values().stream().mapToDouble(Double::doubleValue).sum();
                total.setText(String.format("$%.2f", totall));

                jLabel32.setText(id); // opcional

                for (Component comp : panelPlanes.getComponents()) {
                    if (comp instanceof JPanel && comp != header) {
                        comp.setBackground(null);
                    }
                }
                filaPanel.setBackground(new Color(230, 255, 240));
            });

            panelPlanes.add(filaPanel);
        }

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
            "Error al cargar planes:\n" + e.getMessage(),
            "Error de base de datos",
            JOptionPane.ERROR_MESSAGE);
    } finally {
        conexion.cerrar();
    }

    panelPlanes.revalidate();
    panelPlanes.repaint();
}


private void filtrarPlanes(JPanel panelPlanes, String texto, boolean buscarPorDescripcion) {
    panelPlanes.setOpaque(true);
    panelPlanes.removeAll();
    panelPlanes.setLayout(new BoxLayout(panelPlanes, BoxLayout.Y_AXIS));
    panelPlanes.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

    String[] columnas = {"", "Nombre", "Descripción", "Precio"};
    int[] anchos = {50, 180, 280, 100};

    JPanel header = new JPanel(new GridLayout(1, columnas.length, 5, 0));
    header.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
    header.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.GRAY));

    for (int i = 0; i < columnas.length; i++) {
        JLabel lbl = new JLabel(columnas[i], JLabel.CENTER);
        lbl.setFont(new Font("Roboto Medium", Font.BOLD, 14));
        lbl.setPreferredSize(new Dimension(anchos[i], 30));
        header.add(lbl);
    }
    panelPlanes.add(header);

    idsSeleccionados.clear();
    java.util.Map<String, Double> preciosSeleccionados = new java.util.HashMap<>();

    Conexion conexion = new Conexion();
    Connection conn = null;

    try {
        conexion.conectar();
        conn = conexion.getConexion();

        String query = "SELECT planesID, nombre, descripcion, precio, imagen FROM Planes ";
        query += buscarPorDescripcion ? "WHERE descripcion LIKE ?" : "WHERE nombre LIKE ?";

        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setString(1, "%" + texto + "%");
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String id = rs.getString("planesID");
            String nombre = rs.getString("nombre");
            String descripcion = rs.getString("descripcion");
            double precio = rs.getDouble("precio");
            String imagenURL = rs.getString("imagen");

            JPanel filaPanel = new JPanel(new GridLayout(1, columnas.length, 5, 0));
            filaPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));
            filaPanel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));

            JCheckBox checkBox = new JCheckBox();
            checkBox.setName(id);
            checkBox.setHorizontalAlignment(SwingConstants.CENTER);
            filaPanel.add(wrap(checkBox, anchos[0]));

            filaPanel.add(wrap(new JLabel(nombre, JLabel.CENTER), anchos[1]));
            filaPanel.add(wrap(new JLabel(descripcion, JLabel.CENTER), anchos[2]));
            filaPanel.add(wrap(new JLabel(String.format("$%.2f", precio), JLabel.CENTER), anchos[3]));

            checkBox.addActionListener(e -> {
                if (checkBox.isSelected()) {
                    if (!idsSeleccionados.contains(id)) {
                        idsSeleccionados.add(id);
                        preciosSeleccionados.put(id, precio);
                    }

                    mostrarImagenEnPanel(imagenURL, panelImagen); // 👈🏼 Aquí se muestra la imagen
                }

                double totall = preciosSeleccionados.values().stream().mapToDouble(Double::doubleValue).sum();
                total.setText(String.format("$%.2f", totall));

                for (Component comp : panelPlanes.getComponents()) {
                    if (comp instanceof JPanel && comp != header) {
                        comp.setBackground(null);
                    }
                }
                filaPanel.setBackground(new Color(230, 255, 240));
            });

            panelPlanes.add(filaPanel);
        }

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,
            "Error al cargar planes:\n" + e.getMessage(),
            "Error de base de datos",
            JOptionPane.ERROR_MESSAGE);
    } finally {
        conexion.cerrar();
    }

    panelPlanes.revalidate();
    panelPlanes.repaint();
}





private JPanel wrap(Component comp, int ancho) {
    JPanel contenedor = new JPanel(new BorderLayout());
    contenedor.setPreferredSize(new Dimension(ancho, 30));
    contenedor.add(comp, BorderLayout.CENTER);
    return contenedor;
}

   public static String generarID() {
    String caracteres = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    SecureRandom random = new SecureRandom();
    StringBuilder sb = new StringBuilder(8); // longitud
    for (int i = 0; i < 8; i++) {
        sb.append(caracteres.charAt(random.nextInt(caracteres.length())));
    }
    return "UK_" + sb.toString();}
    private void buscadorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscadorKeyReleased

    }//GEN-LAST:event_buscadorKeyReleased



    private void buscadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscadorKeyTyped

    }//GEN-LAST:event_buscadorKeyTyped

    class Plan {
    String id;
    String nombre;
    String descripcion;
    double precio;

    Plan(String id, String nombre, String descripcion, double precio) {
        this.id = id;
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.precio = precio;
    }
}

    
private java.util.List<Plan> manejarSeleccionCheckbox() {
    java.util.List<Plan> planesSeleccionados = new ArrayList<>();

    for (Component comp : panelTabla.getComponents()) {
        if (comp instanceof JPanel fila) {
            Component[] celdas = fila.getComponents();

            if (celdas.length < 4) {
                System.out.println("Fila con menos de 4 celdas. Se omite.");
                continue;
            }

            JCheckBox checkBox = null;
            String id = "", nombre = "", descripcion = "";
            double precio = 0;

            // ⚠️ Celda 0: se espera que contenga un JCheckBox dentro de un JPanel
            Component celda0 = celdas[0];
            if (celda0 instanceof JPanel panel && panel.getComponentCount() > 0) {
                Component hijo = panel.getComponent(0);
                if (hijo instanceof JCheckBox cb) {
                    checkBox = cb;
                    id = cb.getName(); // Ya lo habías guardado con .setName(id)
                } else {
                    System.out.println("El contenido de la celda 0 no es un JCheckBox.");
                }
            } else {
                System.out.println("La celda 0 no es un JPanel válido.");
            }

            if (checkBox != null && checkBox.isSelected()) {
                // Celda 1: nombre
                if (celdas[1] instanceof JPanel p1 && p1.getComponentCount() > 0 && p1.getComponent(0) instanceof JLabel lbl1) {
                    nombre = lbl1.getText();
                }

                // Celda 2: descripción
                if (celdas[2] instanceof JPanel p2 && p2.getComponentCount() > 0 && p2.getComponent(0) instanceof JLabel lbl2) {
                    descripcion = lbl2.getText();
                }

                // Celda 3: precio
                if (celdas[3] instanceof JPanel p3 && p3.getComponentCount() > 0 && p3.getComponent(0) instanceof JLabel lbl3) {
                    String precioTexto = lbl3.getText().replace("$", "").replace(",", "");
                    try {
                        precio = Double.parseDouble(precioTexto);
                    } catch (NumberFormatException e) {
                        System.out.println("Precio no válido: " + lbl3.getText());
                        precio = 0;
                    }
                }

                // Agregar el plan a la lista
                planesSeleccionados.add(new Plan(id, nombre, descripcion, precio));
            }
        }
    }

    return planesSeleccionados;
}


    
    
    
    
    public void generarPDFPlanesComprados(java.util.List<Plan> planesSeleccionados) {
    com.itextpdf.text.Document document = new com.itextpdf.text.Document(com.itextpdf.text.PageSize.A4, 50, 50, 50, 50);

    try {
       String ruta = new File("pdfs/documentok.pdf").getAbsolutePath();
/*String archivoRuta = new File("documentok.pdf").getAbsolutePath();
*/
//String archivoRuta = new File("pdfs/documentok.pdf").getAbsolutePath();

        com.itextpdf.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(ruta));
        document.open();

        // Fuente personalizada
        com.itextpdf.text.Font tituloFont = new com.itextpdf.text.Font(
            com.itextpdf.text.Font.FontFamily.HELVETICA, 20, com.itextpdf.text.Font.BOLD, 
            new com.itextpdf.text.BaseColor(34, 139, 34)); // verde

        com.itextpdf.text.Font subtituloFont = new com.itextpdf.text.Font(
            com.itextpdf.text.Font.FontFamily.HELVETICA, 14, com.itextpdf.text.Font.BOLD);

        com.itextpdf.text.Font textoFont = new com.itextpdf.text.Font(
            com.itextpdf.text.Font.FontFamily.HELVETICA, 12);

        com.itextpdf.text.Paragraph titulo = new com.itextpdf.text.Paragraph("Gracias por tu compra", tituloFont);
        titulo.setAlignment(com.itextpdf.text.Element.ALIGN_CENTER);
        titulo.setSpacingAfter(20f);
        document.add(titulo);

        for (Plan plan : planesSeleccionados) {
            com.itextpdf.text.pdf.PdfPTable table = new com.itextpdf.text.pdf.PdfPTable(2);
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);
            table.setWidths(new float[]{1f, 3f});

            // Agregar las celdas con estilo
            table.addCell(getCell("ID:", subtituloFont));
            table.addCell(getCell(plan.id, textoFont));
            table.addCell(getCell("Nombre:", subtituloFont));
            table.addCell(getCell(plan.nombre, textoFont));
            table.addCell(getCell("Descripción:", subtituloFont));
            table.addCell(getCell(plan.descripcion, textoFont));
            table.addCell(getCell("Precio:", subtituloFont));
            table.addCell(getCell(String.format("$%.2f", plan.precio), textoFont));

            document.add(table);
        }

        document.close();
        javax.swing.JOptionPane.showMessageDialog(null, "PDF generado exitosamente:\n" + ruta);

    } catch (Exception e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(null, "Error al generar PDF:\n" + e.getMessage());
    }
}

// Método para generar celdas bonitas
private com.itextpdf.text.pdf.PdfPCell getCell(String text, com.itextpdf.text.Font font) {
    com.itextpdf.text.pdf.PdfPCell cell = new com.itextpdf.text.pdf.PdfPCell(
        new com.itextpdf.text.Phrase(text, font)
    );
    cell.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
    cell.setPadding(5f);
    return cell;
}

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
    String id = jLabel32.getText().trim();
    String email = turistaEmail.getText().trim();

    if (email.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe llenar el campo");
        return;
    } else if (!Validador.validarCorreo(email)) {
        JOptionPane.showMessageDialog(null, "Debe dar un correo real", "", JOptionPane.ERROR_MESSAGE);
        return;
    }
/*java.util.List<Plan> planesSeleccionados*/
    // Paso 1: Recolectar planes seleccionados (suponiendo que este método ya existe y retorna List<Plan>)
    java.util.List<Plan> planesSeleccionados = manejarSeleccionCheckbox();  // <<-- este método lo defines tú

    if (planesSeleccionados.isEmpty()) {
        JOptionPane.showMessageDialog(null, "No se seleccionó ningún plan.");
        return;
    }

    // Paso 2: Generar el PDF
    generarPDFPlanesComprados(planesSeleccionados);

    // Paso 3: Enviar el correo (tu código tal como lo tenías)
    final String remitente = "kantkickgarabatoinc@gmail.com";
    final String clave = "lqrx slza fgij gmwu";
    String destinatario = email;
    String asunto = "Felicidades has hecho una compra en kant ";
    String cuerpo = "El plan para los grandes";
    
String archivoRuta = new File("pdfs/documentok.pdf").getAbsolutePath();


    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, clave);
        }
    });

    try {
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(remitente));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        message.setSubject(asunto);

        MimeBodyPart texto = new MimeBodyPart();
        texto.setText(cuerpo);

        MimeBodyPart adjunto = new MimeBodyPart();
        File archivo = new File(archivoRuta);

        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(null, "Archivo no encontrado en: " + archivo.getCanonicalPath());
            return;
        }

        adjunto.attachFile(archivo);

        Multipart multiParte = new MimeMultipart();
        multiParte.addBodyPart(texto);
        multiParte.addBodyPart(adjunto);

        message.setContent(multiParte);

        Transport.send(message);
        JOptionPane.showMessageDialog(null, "Correo enviado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al enviar: " + e.getMessage());
        e.printStackTrace();
    }


        
    }//GEN-LAST:event_jButton1ActionPerformed
/*
     String id = jLabel32.getText().trim();       
          

            
           String email=turistaEmail.getText().trim();
     if (email.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Debe llenar el campo");
        
    }else if(Validador.validarCorreo(email)==false ){
       JOptionPane.showMessageDialog(null,
            "Debe dar un correo real" ,
            "",
            JOptionPane.ERROR_MESSAGE);
    }else if (id.equals("ID") ) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún turista.");
               
            }else{
        
    final String remitente = "kantkickgarabatoinc@gmail.com";
    final String clave = "lqrx slza fgij gmwu";

   
    String destinatario = email;
System.out.println("Correo destinatario:" + destinatario);

   
    String asunto = "Felicidades has hecho una compra en kant ";
    String cuerpo = "El plan para los grandes";

   
    String archivoRuta = "C:\\Users\\migue\\Documents\\NetBeansProjects\\AppKant\\documentok.pdf";

  
    System.out.println("Ruta archivo: [" + archivoRuta + "]");

    Properties props = new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.put("mail.smtp.port", "587");
    props.put("mail.smtp.auth", "true");
    props.put("mail.smtp.starttls.enable", "true");

    Session session = Session.getInstance(props, new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication() {
            return new PasswordAuthentication(remitente, clave);
        }
    });

    try {
        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(remitente));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(destinatario));
        message.setSubject(asunto);

        MimeBodyPart texto = new MimeBodyPart();
        texto.setText(cuerpo);

        MimeBodyPart adjunto = new MimeBodyPart();
        File archivo = new File(archivoRuta);

        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(null, "Archivo no encontrado en: " + archivo.getCanonicalPath());
            return;
        }

        adjunto.attachFile(archivo);

        Multipart multiParte = new MimeMultipart();
        multiParte.addBodyPart(texto);
        multiParte.addBodyPart(adjunto);

        message.setContent(multiParte);
        
        
        System.out.println("Enviando correo a: " + destinatario);
System.out.println("Desde: " + remitente);
System.out.println("Asunto: " + asunto);
System.out.println("Cuerpo: " + cuerpo);

        Transport.send(message);

        JOptionPane.showMessageDialog(null, "Correo enviado correctamente");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al enviar: " + e.getMessage());
        e.printStackTrace();
    }
        
        
    }
    */
    private void turistaEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_turistaEmailFocusGained
      
    }//GEN-LAST:event_turistaEmailFocusGained

    private void turistaEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_turistaEmailFocusLost
      
    }//GEN-LAST:event_turistaEmailFocusLost

    private void turistaEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turistaEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turistaEmailActionPerformed

    private void logOutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutBtnMouseClicked
       int confirm = JOptionPane.showConfirmDialog(null,
            "¿Estás seguro de que deseas cerrar sesión?",
            "Confirmación", JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) return;
        
        Login nuevaVentana = new Login();
        nuevaVentana.setVisible(true);
        // Cerrar la ventana actual
          

        this.dispose();
    }//GEN-LAST:event_logOutBtnMouseClicked

    private void logOutBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutBtnMouseEntered
        logOutBtn.setBackground(new Color(240, 240, 240));
    }//GEN-LAST:event_logOutBtnMouseEntered

    private void logOutBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutBtnMouseExited
        logOutBtn.setBackground(Color.white);
    }//GEN-LAST:event_logOutBtnMouseExited

    public String obtenerCorreoUsuarioDesdeBD(String usuario) {
    try {
           conexionBD = new Conexion();
conexionBD.conectar();
conn = conexionBD.getConexion();
        String sql = "SELECT UsuarioID FROM Usuarios WHERE ClaveUsuario = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, usuario);
        ResultSet rs = stmt.executeQuery();
       
        if (rs.next()) {
            System.out.println(rs.getString("UsuarioID"));
            return rs.getString("UsuarioID");
            
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return null;
}



    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Comprau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Comprau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Comprau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Comprau.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                String usuario = null;
                new Comprau(usuario).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup a;
    private javax.swing.JPanel asignacioPlanes;
    private javax.swing.JTextField buscador;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel logOutBtn;
    private javax.swing.JPanel panelAsignarPlanTuristico;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JLabel total;
    private javax.swing.JTextField turistaEmail;
    private com.weatherComponent.WeatherComponent weatherComponent1;
    private com.weatherComponent.WeatherComponentBeanInfo weatherComponentBeanInfo1;
    private com.weatherComponent.WeatherComponentBeanInfo weatherComponentBeanInfo2;
    // End of variables declaration//GEN-END:variables
}
